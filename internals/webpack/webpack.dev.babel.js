/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const fs = require('fs');
const glob = require('glob');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const pkg = require(path.resolve(process.cwd(), 'package.json'));
const { dllPlugin } = pkg;

const plugins = [
  // Enable webpack hot reloading
  new webpack.HotModuleReplacementPlugin(), 
  new HtmlWebpackPlugin({
    // Inject all files that are generated by webpack, e.g. bundle.js
    inject: true, 
    template: 'src/index.html'
  }),
  new CircularDependencyPlugin({
    // exclude node_modules
    exclude: /a\.js|node_modules/, 
    // show a warning when there is a circular dependency
    failOnError: false 
  })
];

if (dllPlugin) {
  glob.sync(`${dllPlugin.path}/*.dll.js`).forEach(dllPath => {
    plugins.push(
      new AddAssetHtmlPlugin({
        filepath: dllPath,
        includeSourcemap: false
      })
    );
  });
}

module.exports = require('./webpack.base.babel')({
  mode: 'development',

  // Add hot reloading in development
  entry: [
    // Necessary for hot reloading with IE
    'eventsource-polyfill', 
    'webpack-hot-middleware/client?reload=true',
    // Start with src/app.js
    path.join(process.cwd(), 'src/app.js') 
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js'
  },

  optimization: {
    minimize: false
  },

  // Add development plugins
  plugins: dependencyHandlers().concat(plugins), 

  // Emit a source map for easier debugging
  devtool: 'eval-source-map',

  performance: {
    hints: false
  }
});

/**
 * Select which plugins to use to optimize the bundle's handling of
 * third party dependencies. If there is a dllPlugin key on the project's 
 * package.json, the Webpack DLL Plugin will be used.
 */
function dependencyHandlers() {
  // Don't do anything during the DLL Build step
  if (process.env.BUILDING_DLL) {
    return [];
  }

  // Don't do anything if package.json does not have a dllPlugin property
  if (!dllPlugin) {
    return [];
  }

  const dllPath = path.resolve(
    process.cwd(),
    dllPlugin.path || 'node_modules/react-boilerplate-dlls'
  );

  /**
   * If DLLs aren't explicitly defined, assume all production dependencies listed in package.json
   * Exclude any server side dependencies by listing them in dllConfig.exclude
   */
  if (!dllPlugin.dlls) {
    const manifestPath = path.resolve(dllPath, 'reactBoilerplateDeps.json');

    if (!fs.existsSync(manifestPath)) {
      console.error(
        'The DLL manifest is missing. Please run `npm run build:dll`'
      );
      process.exit(0);
    }

    return [
      new webpack.DllReferencePlugin({
        context: process.cwd(),
        manifest: require(manifestPath) 
      })
    ];
  }

  // If DLLs are explicitly defined, automatically create 
  // a DLLReferencePlugin for each of them.
  const dllManifests = Object.keys(dllPlugin.dlls).map(name =>
    path.join(dllPath, `/${name}.json`)
  );

  return dllManifests.map(manifestPath => {
    if (!fs.existsSync(path)) {
      if (!fs.existsSync(manifestPath)) {
        console.error(
          `The following Webpack DLL manifest is missing: ${path.basename(
            manifestPath
          )}`
        );
        console.error(`Expected to find it in ${dllPath}`);
        console.error('Please run: npm run build:dll');

        process.exit(0);
      }
    }

    return new webpack.DllReferencePlugin({
      context: process.cwd(),
      manifest: require(manifestPath) 
    });
  });
}
